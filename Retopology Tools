bl_info = {
    "name": "Retopology Tools",
    "author": "CÃ©dric Lepiller",
    "version": (0, 1, 0),
    "blender": (2, 7, 0),
    "location": "View 3D > Toolbar > Tools tab > Retopology (panel)",
    "description": "Tools for fast retopology",
    "category": "3D View"}

############### Operators

import bpy

#Wire on all objects
class Wire_All(bpy.types.Operator):
    """Tooltip"""
    bl_idname = "object.wire_all"
    bl_label = "Wire on All Objects"

    @classmethod
    def poll(cls, context):
        return context.active_object is not None

    def execute(self, context):
        
        for obj in bpy.data.objects:
            if obj.show_wire:
                obj.show_all_edges = False
                obj.show_wire = False
            
            else:
                obj.show_all_edges = True
                obj.show_wire = True
               
                
        return {'FINISHED'}

#Align to X
class AlignToX(bpy.types.Operator):  
    bl_idname = "object.align2x"  
    bl_label = "Align To X"  
  
    def execute(self, context):
        bpy.ops.object.mode_set(mode = 'OBJECT')
        bpy.ops.object.transform_apply(location=True, rotation=True, scale=True)

        for vert in bpy.context.object.data.vertices:
            if vert.select: 
                vert.co[0] = 0
        bpy.ops.object.editmode_toggle() 
        return {'FINISHED'} 

#Select Ngons
class SelectNGons(bpy.types.Operator):  
    bl_idname = "object.sngons"  
    bl_label = "Select Ngons"  
  
    def execute(self, context):
        print("----- SCRIPT -----")
            
        for ob in bpy.data.objects:
            if ob.select:
                if ob.type == "MESH":
                    ob.select = True
                    m = ob.data
                    faces = []
                    for face in m.polygons:
                        face.select = False
                        verts_on_face = face.vertices[:] 
                        if len(verts_on_face) > 4:
                            face.select = True
                            faces.append(face.index)
                                              
                    if len(faces) > 0:
                        ob.select = False
                        print(ob.name)                
                        print(faces)
                        bpy.context.scene.objects.active = ob                  
                        
            bpy.ops.object.mode_set(mode = 'EDIT')
            return {'FINISHED'} 

#################### Panel
  
class RetopologyTools(bpy.types.Panel): 
    
    bl_label = "Retopology Tools"
    bl_space_type = 'VIEW_3D'
    bl_region_type = 'TOOLS'
    bl_category = "Retopology"
  
    def draw(self, context): 
        layout = self.layout 
        
        #Tools
        layout.label(text="Tools :")
        
        row = layout.row()
        row.operator("object.join", icon = 'ROTATECENTER')
        row.operator("mesh.separate", icon = 'ROTATECOLLECTION').type = "LOOSE"
        
        row = layout.row()
        row.operator("mesh.flip_normals", icon = 'FULLSCREEN_ENTER')
        row = layout.row()
        row.operator("mesh.normals_make_consistent", icon = 'MATCUBE')
        row = layout.row()
        row.operator("mesh.remove_doubles",icon='X_VEC')
        
        row = layout.row()
        row.operator("object.align2x", icon='MOD_WIREFRAME')
        row = layout.row()
        row.operator("object.sngons", icon='MESH_ICOSPHERE')
        
        row = layout.row()
        row.operator("object.transform_apply", text="Apply Transforms", icon='FREEZE')
        row = layout.row()
        row.operator("object.modifier_apply", text="Apply Subsurf", icon='MOD_SUBSURF').modifier="Subsurf"
        row.operator("object.modifier_apply", text="Apply Mirror", icon='MOD_MIRROR').modifier="Mirror"

        #Shading
        layout.label(text="Shading :")
        row = layout.row()
        row.operator("wm.context_toggle", text="Xray", icon='META_CUBE').data_path = "object.show_x_ray"
        row.operator("wm.context_toggle", text="HWire", icon='GHOST_ENABLED').data_path = "space_data.show_occlude_wire"
        row.operator("wm.context_toggle", text="L2V", icon='ORTHO').data_path = "space_data.use_occlude_geometry"
        row = layout.row()
        
        row.operator("object.wire_all", text="Wire All", icon='WIRE')
        row.operator("object.wire_selected", text="Wire Selected", icon='WIRE')
        row = layout.row()
        row.operator("object.shade_smooth", text= "Smooth", icon = 'ANTIALIASED')
        row.operator("object.shade_flat", text= "Flat", icon = 'ALIASED')
        
        row = layout.row()
        view = context.space_data
        obj = context.object
        col = layout.column()
        col.prop(view, "show_backface_culling")
        
        
        
        #Properties
        layout.label(text="Properties :")
        ob = context.active_object
        tool_settings = context.tool_settings
        mesh = ob.data
        
        row = layout.row()
        row.operator("wm.context_toggle", text="Auto Merge", icon='AUTOMERGE_ON').data_path = "scene.tool_settings.use_mesh_automerge"
        col = layout.column(align=True)
        col.prop(mesh, "use_mirror_x")
        
        
        col.label("Double Threshold:")
        col.prop(tool_settings, "double_threshold", text="")
        
        
  
def register(): 
    bpy.utils.register_class(RetopologyTools) 
    bpy.utils.register_class(SelectNGons)
    bpy.utils.register_class(AlignToX)
    bpy.utils.register_class(Wire_All)
    
    
def unregister(): 
    bpy.utils.unregister_class(RetopologyTools) 
    bpy.utils.unregister_class(SelectNGons)
    bpy.utils.unregister_class(AlignToX)
    bpy.utils.unregister_class(Wire_All)
    
if __name__ == "__main__": 
    register() 

